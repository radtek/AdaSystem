@using System.Web.Optimization
@using Ada.Core.Domain
@using Ada.Core.Infrastructure
@using Ada.Core.ViewModel.Finance
@using Ada.Services.Admin
@using Ada.Services.Finance
@using Microsoft.Ajax.Utilities
@model Ada.Core.ViewModel.Purchase.PurchasePaymentView
@{
    ViewBag.Title = "申请付款";
    List<SelectListItem> urls = new List<SelectListItem>() { new SelectListItem() { Text = "采购请款", Value = Url.Action("Index") } };
    var fieldService = EngineContext.Current.Resolve<IFieldService>();
    var paymentTypes = fieldService.GetFieldsByKey("PurchasePaymentType").Select(d => new SelectListItem { Text = d.Text, Value = d.Value });
}
@Html.Partial("Bread", urls)

<div class="wrapper wrapper-content">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <p class="bg-danger">@Html.ValidationMessage("message") </p>
        <div class="row">
            <div class="col-lg-12">
                <div class="ibox">
                    <div class="ibox-title">
                        <a class="btn btn-outline btn-default btn-sm" href="@Url.Action("Index")"><i class="fa fa-reply"></i> 返回</a>
                        <button class="btn btn-primary btn-sm ladda-button" type="submit" data-style="slide-right"><i class="fa fa-floppy-o"></i> 保存</button>
                    </div>
                    <div class="ibox-content">
                        <div class="sk-spinner sk-spinner-wave">
                            <div class="sk-rect2"></div>
                            <div class="sk-rect3"></div>
                            <div class="sk-rect4"></div>
                            <div class="sk-rect5"></div>
                        </div>
                        <div class="form-horizontal">
                            <div class="row">
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(d => d.ApplicationNum, Html.DisplayNameFor(d => d.ApplicationNum).ToString(), new { @class = "col-sm-4 control-label" })
                                    <div class="col-sm-8">
                                        @Html.TextBoxFor(d => d.ApplicationNum, new { @class = "form-control", @readonly = "", placeholder = "自动编码" })
                                    </div>
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(d => d.PaymentType, Html.DisplayNameFor(d => d.PaymentType).ToString(), new { @class = "col-sm-4 control-label" })
                                    <div class="col-sm-8">
                                        @Html.DropDownListFor(d => d.PaymentType, paymentTypes, new { @class = "form-control", required = "" })
                                    </div>
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(d => d.ApplicationDate, Html.DisplayNameFor(d => d.ApplicationDate).ToString(), new { @class = "col-sm-4 control-label" })
                                    <div class="col-sm-8">
                                        <div class="input-group date">
                                            @Html.TextBoxFor(d => d.ApplicationDate, Model.ApplicationDate.IfNotNull(d => d.Value.ToString("yyyy年MM月dd日")), new { @class = "form-control", required = "", @readonly = "" })
                                            <span class="input-group-addon"><span class="glyphicon glyphicon-remove"></span></span>
                                            <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group col-md-4">
                                    @Html.LabelFor(d => d.AccountBank, Html.DisplayNameFor(d => d.AccountBank).ToString(), new { @class = "col-sm-4 control-label" })
                                    <div class="col-sm-8">
                                        @Html.TextBoxFor(d => d.AccountBank, new { @class = "form-control", required = "" })
                                    </div>
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(d => d.AccountName, Html.DisplayNameFor(d => d.AccountName).ToString(), new { @class = "col-sm-4 control-label" })
                                    <div class="col-sm-8">
                                        @Html.TextBoxFor(d => d.AccountName, new { @class = "form-control", required = "" })
                                    </div>
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(d => d.AccountNum, Html.DisplayNameFor(d => d.AccountNum).ToString(), new { @class = "col-sm-4 control-label" })
                                    <div class="col-sm-8">
                                        @Html.TextBoxFor(d => d.AccountNum, new { @class = "form-control", required = "" })
                                    </div>
                                </div>
                                
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(d => d.LinkManId, Html.DisplayNameFor(d => d.LinkManId).ToString(), new { @class = "col-sm-4 control-label" })
                                    <div class="col-sm-8">
                                        <select class="form-control" required="" name="LinkManId" id="LinkManId">
                                            <option value="@Model.LinkManId">@Model.LinkManName</option>
                                        </select>
                                        @Html.HiddenFor(d => d.LinkManName)
                                    </div>
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(d => d.PayMoney, Html.DisplayNameFor(d => d.PayMoney).ToString(), new { @class = "col-sm-4 control-label" })
                                    <div class="col-sm-8">
                                        @Html.TextBoxFor(d => d.PayMoney, new { @class = "form-control", required = "" })
                                    </div>
                                </div>
                                <div class="form-group col-md-4">
                                    @Html.LabelFor(d => d.TransactorId, Html.DisplayNameFor(d => d.TransactorId).ToString(), new { @class = "col-sm-4 control-label", required = "" })
                                    <div class="col-sm-8">
                                        <select class="form-control" required = "" name="TransactorId" id="TransactorId">
                                            <option value="@Model.TransactorId">@Model.Transactor</option>
                                        </select>
                                        @Html.HiddenFor(d => d.Transactor)
                                    </div>
                                </div>
                                
                            </div>
                            
                            <div class="hr-line-dashed"></div>
                            <div class="row">
                                <div class="col-lg-12">
                                    <div id="toolbar" class="btn-group">
                                        <button id="btn_add" type="button" class="btn btn-primary btn-outline">
                                            <i class="fa fa-plus"></i> 添加订单
                                        </button>
                                    </div>
                                    <table id="table"></table>
                                    @Html.HiddenFor(d => d.Details)
                                </div>
                            </div>
                            @Html.HiddenFor(d => d.Id)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Styles {
    @Styles.Render("~/plugins/dateTimePickerStyle")
    @Styles.Render("~/plugins/bootstrapTableStyle")
    @Styles.Render("~/plugins/select2Styles")
}
@section Scripts {
    @Scripts.Render("~/plugins/dateTimePickerScript")
    @Scripts.Render("~/plugins/bootstrapTableScript")
    @Scripts.Render("~/plugins/select2")
    @Scripts.Render("~/plugins/lodash")
    <script>
        var orders = @Html.Raw(string.IsNullOrWhiteSpace(Model.Details)?"[]": Model.Details),
            orderdetail = "@Url.Action("OrderDetails")",
            orderapi = "@Url.Action("GetList", "OrderDetail")",
            linkmanUrl = "@Url.Action("GetList", "LinkMan", new {area = "Customer"})",
            managerUrl = "@Url.Action("GetList", "Manager", new {area = "Admin"})";
            var $ordertable,$table = $('#table'),
            selections = {},
            linkmanSelect = {},
            transactorSelect = {};
        selections.ids = [];
        selections.rows = [];
        linkmanSelect.url = linkmanUrl;
        linkmanSelect.paramsData = function (params) {
            return {
                search: params.term, // search term
                IsBusiness: true
            };
        };
        linkmanSelect.processResults = function (data, params) {
            var result = $.map(data.rows,
                function (v, k) {
                    return { id: v.Id, text: v.Name, commpany: v.CommpanyName };
                });
            return {
                results: result
            };
        };
        linkmanSelect.formatRepo = function (repo) {
            if (repo.loading) {
                return repo.text;
            }
            return "<p>" + repo.commpany + " 【 " + repo.text + " 】 <p>";
        };
        linkmanSelect.formatRepoSelection = function (repo) {
            $("#LinkManName").val(repo.text);
            return repo.text;
        };

        transactorSelect.url = managerUrl;
        transactorSelect.paramsData = function (params) {
            return {
                search: params.term, // search term
                Status: 1
            };
        };
        transactorSelect.processResults = function (data, params) {
            var result = $.map(data.rows,
                function (v, k) {
                    return { id: v.Id, text: v.UserName };
                });
            return {
                results: result
            };
        };
        transactorSelect.formatRepo = function (repo) {
            if (repo.loading) {
                return repo.text;
            }
            return repo.text;
        };
        transactorSelect.formatRepoSelection = function (repo) {
            $("#Transactor").val(repo.text);
            return repo.text;
        };
        window.operateEvents = {
            'click .remove': function (e, value, row, index) {
                $table.bootstrapTable('remove', {
                    field: 'Id',
                    values: [row.Id]
                });
            }
        };
        $(function () {
            initData();

            $(".wrapper.wrapper-content form").validate({
                submitHandler: function (form) {
                    setTableData();
                    $('.wrapper.wrapper-content .ibox').children('.ibox-content').toggleClass('sk-loading');
                    form.submit();
                }
            });
        });

        function initData() {
            $('.input-group.date').datetimepicker({
                language: 'zh-CN',
                weekStart: 1,
                todayBtn: 1,
                autoclose: 1,
                todayHighlight: 1,
                startView: 2,
                minView: 2,
                forceParse: 0,
                format: "yyyy年mm月dd日"
            });
            initSelect2("LinkManId", linkmanSelect);
            initSelect2("TransactorId", transactorSelect);
            $table.bootstrapTable({
                data: orders,
                classes: "table table-no-bordered",
                columns: [
                    {
                        field: 'MediaTypeName',
                        title: '媒体类型',
                        align: "center", valign: "middle",
                        footerFormatter: function () {
                            return "合计";
                        }
                    },
                    {
                        field: 'MediaName',
                        title: '媒体名称',
                        align: "center", valign: "middle"

                    },
                    {
                        field: 'AdPositionName',
                        title: '广告位',
                        align: "center", valign: "middle"
                    },
                    {
                        field: 'CostMoney',
                        title: '成本价格',
                        align: "center", valign: "middle",
                        footerFormatter: sumFormatter
                    },
                    {
                        field: 'Money',
                        title: '采购金额',
                        align: "center", valign: "middle",
                        footerFormatter: sumFormatter
                    }
                    ,
                    {
                        field: 'operate',
                        title: '操作',
                        align: "center", valign: "middle",
                        events: operateEvents,
                        formatter: operateFormatter

                    }

                ],
                formatNoMatches: function () {  //没有匹配的结果
                    return '请先添加订单';
                },
                showFooter: true
            });
            $("#btn_add").click(function() {
                showOrder();
            });
        }
        //保留选中结果
        function responseHandler(res) {
            $.each(res.rows, function (i, row) {
                row.state = $.inArray(row.Id, selections.ids) !== -1;
            });
            return res;
        }
        function initSelect2(id, opt) {
            $("#" + id).select2({
                placeholder: "请输入关键字",
                language: "zh-CN",
                ajax: {
                    url: opt.url,
                    dataType: 'json',
                    delay: 250,
                    data: opt.paramsData,
                    processResults: opt.processResults,
                    cache: true
                },
                escapeMarkup: function (markup) { return markup; }, // 字符转义处理
                minimumInputLength: 1,
                templateResult: opt.formatRepo, //返回结果回调function formatRepo(repo){return repo.text},这样就可以将返回结果的的text显示到下拉框里，当然你可以return repo.text+"1";等
                templateSelection: opt.formatRepoSelection //选中项回调function formatRepoSelection(repo) { return repo.text }

            });
        }
        function operateFormatter(value, row, index) {
            return [
                '<a class="remove" href="javascript:void(0)" title="Remove">',
                '<i class="glyphicon glyphicon-remove"></i>',
                '</a>'
            ].join('');
        }
        //获取选中数据，插入
        function confirmData() {
            if (selections.rows.length > 0) {
                $table.bootstrapTable('append', selections.rows);
            }
            $('#modalView .modal').modal('hide');
        }

        function sumFormatter(data) {
            var field = this.field;
            var total_sum = data.reduce(function (sum, row) {
                return (sum) * 1 + (row[field] || 0) * 1;
            }, 0);
            return Math.toFixMoney(total_sum);
        }

        function setTableData() {
            var tableData = $table.bootstrapTable('getData');
            $("#Details").val(JSON.stringify(tableData));
        }
        //显示采购订单模态窗口
        function showOrder() {
            var linkman = $("#LinkManId").val();
            if (linkman) {
                $("#modalView").load(orderdetail,
                    function () {
                        //初始化
                        $('#modalView .modal').on('shown.bs.modal', function () {
                            $ordertable = $('#orderTable');
                            $ordertable.bootstrapTable({
                                classes: "table table-no-bordered",
                                cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                                url: orderapi,
                                pagination: true,                   //是否显示分页（*）
                                sortable: true,                     //是否启用排序
                                sortOrder: "desc",                   //排序方式
                                sortName: "Id",
                                sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
                                pageNumber: 1,                       //初始化加载第一页，默认第一页
                                pageSize: 10,                       //每页的记录行数（*）
                                search: true,                       //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大
                                strictSearch: true,                 //设置为 true启用 全匹配搜索，否则为模糊搜索
                                //showColumns: true,                  //是否显示所有的列
                                showRefresh: true,                  //是否显示刷新按钮
                                clickToSelect: true,                //是否启用点击选中行
                                uniqueId: "Id",                     //每一行的唯一标识，一般为主键列
                                responseHandler: responseHandler,
                                queryParams: function (parameters) {
                                    parameters.LinkManId = linkman;
                                    return parameters;
                                },
                                columns: [
                                    {
                                        field: 'state',
                                        checkbox: true
                                    },
                                    {
                                        field: 'MediaTypeName',
                                        title: '媒体类型',
                                        align: "center", valign: "middle"

                                    },
                                    {
                                        field: 'MediaName',
                                        title: '媒体名称',
                                        align: "center", valign: "middle"

                                    },
                                    {
                                        field: 'AdPositionName',
                                        title: '广告位',
                                        align: "center", valign: "middle"
                                    },
                                    {
                                        field: 'Money',
                                        title: '采购金额',
                                        align: "center", valign: "middle"
                                    }
                                ]
                            });
                            //注册选中事件
                            $ordertable.on('check.bs.table check-all.bs.table ' +
                                'uncheck.bs.table uncheck-all.bs.table', function (e, rows) {
                                    var ids = $.map(!$.isArray(rows) ? [rows] : rows, function (row) {
                                        return row.Id;
                                    }),
                                        rowarry = $.map(!$.isArray(rows) ? [rows] : rows, function (row) {
                                            return row;
                                        }),
                                        func = $.inArray(e.type, ['check', 'check-all']) > -1 ? 'union' : 'difference';
                                    selections.ids = _[func](selections.ids, ids);
                                    selections.rows = _[func](selections.rows, rowarry);
                                });

                        }).on('hidden.bs.modal', function () {
                            //重置数据
                            selections.ids = [];
                            selections.rows = [];
                            $ordertable.bootstrapTable('destroy');
                        });
                        $('#modalView .modal').modal('show');

                    });
            } else {
                swal("操作提醒", "请先选择供应商", "warning");
            }

        }
    </script>
    
}
