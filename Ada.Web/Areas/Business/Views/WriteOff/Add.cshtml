@using System.Web.Optimization

@model Ada.Core.ViewModel.Business.BusinessWriteOffView
@{
    ViewBag.Title = "销售核销";
    List<SelectListItem> urls = new List<SelectListItem>() { new SelectListItem() { Text = "核销明细", Value = Url.Action("Index") } };
}
@Html.Partial("Bread", urls)

<div class="wrapper wrapper-content animated fadeInRight ecommerce">
    <p class="bg-danger">@Html.ValidationMessage("message") </p>
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox">

                <div class="ibox-content">
                    <div class="sk-spinner sk-spinner-wave">
                        <div class="sk-rect2"></div>
                        <div class="sk-rect3"></div>
                        <div class="sk-rect4"></div>
                        <div class="sk-rect5"></div>
                    </div>

                    @using (Html.BeginForm("Add", "WriteOff", FormMethod.Post, new { @class = "wizard-big" }))
                    {
                        @Html.AntiForgeryToken()
                        
                        <h1>核销对象</h1>
                            <fieldset>
                                <h4>请选择客户</h4>
                                <div class="row">
                                    <div class="col-lg-8">
                                        <div class="form-group">
                                            @*@Html.LabelFor(d=>d.LinkManId, Html.DisplayNameFor(d => d.LinkManId).ToString())*@
                                            <select class="form-control" required="" name="LinkManId" id="LinkManId">
                                                <option value="@Model.LinkManId">@Model.LinkManName</option>
                                            </select>
                                            @Html.HiddenFor(d => d.LinkManName)
                                        </div>
                                    </div>
                                    <div class="col-lg-4">
                                        <div class="text-center">
                                            <div style="margin-top: 20px">
                                                <i class="fa fa-sign-in" style="font-size: 180px;color: #e5e5e5 "></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </fieldset>
                            <h1>核销款项</h1>
                            <fieldset>
                                <h4>请勾选需要核销的款项</h4>
                                <table id="payeetable"></table>
                            </fieldset>

                            <h1>核销订单</h1>
                            <fieldset>
                                <h4>请勾选需要核销的订单</h4>
                                <div class="row">
                                    <div class="col-lg-12">
                                        <table id="ordertable"></table>
                                    </div>
                                </div>
                            </fieldset>

                            <h1>核销完成</h1>
                            <fieldset>
                                <h4>核销信息确认</h4>
                                <div class="row">
                                    <div class="col-lg-8 form-horizontal">
                                        <div class="hr-line-dashed"></div>
                                        <div class="form-group">
                                            @Html.LabelFor(d => d.PayeeMoney, Html.DisplayNameFor(d => d.PayeeMoney).ToString(), new { @class = "col-sm-2 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(d=>d.PayeeMoney, new { @class = "form-control", required = "" ,@readonly=""})
                                            </div>
                                        </div>
                                        <div class="hr-line-dashed"></div>
                                        <div class="form-group">
                                            @Html.LabelFor(d => d.OrderMoney, Html.DisplayNameFor(d => d.OrderMoney).ToString(), new { @class = "col-sm-2 control-label" })
                                            <div class="col-sm-8">
                                                @Html.TextBoxFor(d => d.OrderMoney, new { @class = "form-control", required = "", @readonly = "" })
                                            </div>
                                        </div>
                                        <div class="hr-line-dashed"></div>
                                        <div class="form-group">
                                            @Html.LabelFor(d => d.TransactorId, Html.DisplayNameFor(d => d.TransactorId).ToString(), new {@class = "col-sm-2 control-label"})
                                            <div class="col-sm-8">
                                                <select class="form-control" required="" name="TransactorId" id="TransactorId">
                                                    <option value="@Model.TransactorId">@Model.Transactor</option>
                                                </select>
                                            </div>
                                            @Html.HiddenFor(d => d.Transactor)
                                        </div>
                                        @Html.HiddenFor(d => d.Payees)
                                        @Html.HiddenFor(d => d.Orders)
                                    </div>
                                </div>
                            </fieldset>
                    }
                </div>
            </div>
        </div>

    </div>


</div>
@section Styles {
    
    @Styles.Render("~/plugins/select2Styles")
    @Styles.Render("~/plugins/bootstrapTableStyle")
    @Styles.Render("~/plugins/wizardStepsStyles")
    <style>
        .content.clearfix {
            height: 420px;
        }
        .wizard > .content > .body ul > li {
            display: inline;
        }
    </style>
}
@section Scripts {
    @Scripts.Render("~/plugins/wizardSteps")
    @Scripts.Render("~/plugins/select2")
    @Scripts.Render("~/plugins/bootstrapTableScript")
    @Scripts.Render("~/plugins/lodash")

    <script type="text/javascript">
        var linkmanSelect = {},
            transactorSelect = {},
            isPayeeSelect = false,
            isOrderSelect = false,
            payeeSelections = {},
            orderSelections = {},
            $payeeTable,
            $orderTable;
        payeeSelections.ids = [];
        payeeSelections.rows = [];
        orderSelections.ids = [];
        orderSelections.rows = [];
        linkmanSelect.url = "@Url.Action("GetList", "LinkMan", new {area = "Customer"})";
        linkmanSelect.paramsData = function (params) {
            return {
                search: params.term, // search term
                IsBusiness: false
            };
        };
        linkmanSelect.processResults = function (data, params) {
            var result = $.map(data.rows,
                function (v, k) {
                    return { id: v.Id, text: v.Name, commpany: v.CommpanyName };
                });
            return {
                results: result
            };
        };
        linkmanSelect.formatRepo = function (repo) {
            if (repo.loading) {
                return repo.text;
            }
            return "<p>" + repo.commpany + " 【 " + repo.text + " 】 <p>";
        };
        linkmanSelect.formatRepoSelection = function (repo) {
            $("#LinkManName").val(repo.text);
            isPayeeSelect = true;
            isOrderSelect = true;
            payeeSelections.ids = [];
            payeeSelections.rows = [];
            orderSelections.ids = [];
            orderSelections.rows = [];
            return repo.text;
        };
        transactorSelect.url = "@Url.Action("GetList", "Manager", new {area = "Admin"})";
        transactorSelect.paramsData = function (params) {
            return {
                search: params.term, // search term
                Status: 1
            };
        };
        transactorSelect.processResults = function (data, params) {
            var result = $.map(data.rows,
                function (v, k) {
                    return { id: v.Id, text: v.UserName };
                });
            return {
                results: result
            };
        };
        transactorSelect.formatRepo = function (repo) {
            if (repo.loading) {
                return repo.text;
            }
            return repo.text;
        };
        transactorSelect.formatRepoSelection = function (repo) {
            $("#Transactor").val(repo.text);
            return repo.text;
        };
        $(function() {

            $(".wrapper.wrapper-content form").steps({
                bodyTag: "fieldset",
                labels: {
                    cancel: "取消",
                    finish: "确认核销",
                    next: "下一步",
                    previous: "上一步",
                    loading: "核销中 ..."
                },
                onInit: function (event, currentIndex) {
                    initSelect2("LinkManId", linkmanSelect);
                    $payeeTable = $('#payeetable');
                    $orderTable = $('#ordertable');
                    initPayee();
                    initOrder();
                },
                onStepChanging: function (event, currentIndex, newIndex) {
                    // Always allow going backward even if the current step contains invalid fields!
                    if (currentIndex > newIndex) {
                        return true;
                    }

                    //// Forbid suppressing "Warning" step if the user is to young
                    //if (newIndex === 3 && Number($("#age").val()) < 18) {
                    //    return false;
                    //}

                    var form = $(this);

                    // Clean up if user went backward before
                    if (currentIndex < newIndex) {
                        // To remove error styles
                        $(".body:eq(" + newIndex + ") label.error", form).remove();
                        $(".body:eq(" + newIndex + ") .error", form).removeClass("error");
                    }

                    // Disable validation on fields that are disabled or hidden.
                    form.validate().settings.ignore = ":disabled,:hidden";

                    // Start validation; Prevent going forward if false
                    return form.valid();
                },
                onStepChanged: function (event, currentIndex, priorIndex) {
                    //// Suppress (skip) "Warning" step if the user is old enough.
                    if (currentIndex === 3) {
                        initSelect2("TransactorId", transactorSelect);
                        //计算选取总额
                        var orderMoney = 0,payeeMoney=0;
                        $.each(orderSelections.rows,
                            function(k,v) {
                                orderMoney += v.TotalMoney;
                            });
                        $.each(payeeSelections.rows,
                            function (k, v) {
                                payeeMoney += v.VerificationMoney;
                            });
                        $("#OrderMoney").val(orderMoney);
                        $("#PayeeMoney").val(payeeMoney);
                        $("#Payees").val(payeeSelections.ids.join(","));
                        $("#Orders").val(orderSelections.ids.join(","));
                        //$(this).steps("next");
                    }
                    if (currentIndex === 1 && isPayeeSelect) {
                        $("#payeetable").bootstrapTable('refresh');
                        isPayeeSelect = false;
                    }
                    if (currentIndex === 2 && isOrderSelect) {
                        $("#ordertable").bootstrapTable('refresh');
                        isOrderSelect = false;
                    }
                    //// Suppress (skip) "Warning" step if the user is old enough and wants to the previous step.
                    //if (currentIndex === 2 && priorIndex === 3) {
                    //    $(this).steps("previous");
                    //}

                },
                onFinishing: function (event, currentIndex) {
                    var form = $(this);

                    // Disable validation on fields that are disabled.
                    // At this point it's recommended to do an overall check (mean ignoring only disabled fields)
                    form.validate().settings.ignore = ":disabled";

                    // Start validation; Prevent form submission if false
                    return form.valid();
                },
                onFinished: function (event, currentIndex) {
                    var form = $(this);
                    $('.wrapper.wrapper-content .ibox').children('.ibox-content').toggleClass('sk-loading');
                    // Submit form input
                    form.submit();
                }
            }).validate({
                errorPlacement: function (error, element) {
                    element.before(error);
                },
                rules:{
                    PayeeMoney:{
                        equalTo: "#OrderMoney",
                        min:0.01
                    }                  
                },
                messages: {
                    PayeeMoney: {
                        equalTo: "领款金额须和订单金额一致",
                        min: "核销金额须大于0"
                    }
                }

            });
        });
        function initSelect2(id, opt) {
            $("#" + id).select2({
                placeholder: "请输入关键字",
                language: "zh-CN",
                ajax: {
                    url: opt.url,
                    dataType: 'json',
                    delay: 250,
                    data: opt.paramsData,
                    processResults: opt.processResults,
                    cache: true
                },
                escapeMarkup: function (markup) { return markup; }, // 字符转义处理
                minimumInputLength: 1,
                templateResult: opt.formatRepo, //返回结果回调function formatRepo(repo){return repo.text},这样就可以将返回结果的的text显示到下拉框里，当然你可以return repo.text+"1";等
                templateSelection: opt.formatRepoSelection //选中项回调function formatRepoSelection(repo) { return repo.text }

            });
        }
        //领款记录
        function initPayee() {
            $payeeTable.bootstrapTable({
                classes: "table table-no-bordered",
                url: '@Url.Action("GetList", "Payee")',         //请求后台的URL（*）
                height:360,
                striped: true,                      //是否显示行间隔色
                cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                sortable: true,                     //是否启用排序
                sortOrder: "desc",                   //排序方式
                sortName: "Id",
                sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
                pagination: true,
                pageNumber: 1,                       //初始化加载第一页，默认第一页
                pageSize: 7,                       //每页的记录行数（*）
                pageList:[7,15,50],
                clickToSelect: true,                //是否启用点击选中行
                //singleSelect: true,                  //设置True 将禁止多选
                uniqueId: "Id",                     //每一行的唯一标识，一般为主键列
                mobileResponsive: true,
                queryParams: function (parameters) {
                    parameters.LinkManId = $("#LinkManId").val();
                    parameters.VerificationStatus = 0;
                    return parameters;
                },
                responseHandler: payeeResponseHandler,
                columns: [
                    {
                        field: 'state',
                        checkbox: true
                    },
                    {
                        field: 'LinkManName',
                        title: '客户名称',
                        align: "center", valign: "middle"
                    },
                    {
                        field: 'VerificationMoney',
                        title: '未核销金额',
                        align: "center", valign: "middle"
                    },
                    {
                        field: 'ClaimDate',
                        title: '领款日期',
                        align: "center", valign: "middle",
                        formatter: function (value) {
                            return moment(value).format("YYYY-MM-DD");
                        }
                    }
                ]
            });
            checkOn($payeeTable, payeeSelections);
        }
        //订单列表
         function initOrder() {
             $orderTable.bootstrapTable({
                classes: "table table-no-bordered",
                url: '@Url.Action("GetList", "Order")',         //请求后台的URL（*）
                height:360,
                striped: true,                      //是否显示行间隔色
                cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                sortable: true,                     //是否启用排序
                sortOrder: "desc",                   //排序方式
                sortName: "Id",
                sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
                pagination: true,
                pageNumber: 1,                       //初始化加载第一页，默认第一页
                pageSize: 7,                       //每页的记录行数（*）
                pageList: [7, 15, 50],
                clickToSelect: true,                //是否启用点击选中行
                singleSelect: true,                  //设置True 将禁止多选
                uniqueId: "Id",                     //每一行的唯一标识，一般为主键列
                mobileResponsive: true,
                queryParams: function (parameters) {
                    parameters.LinkManId = $("#LinkManId").val();
                    parameters.VerificationStatus = 0;
                    return parameters;
                },
                responseHandler: orderResponseHandler,
                columns: [
                    {
                        field: 'state',
                        checkbox: true
                    },
                    {
                        field: 'OrderNum',
                        title: '订单编号',
                        align: "center", valign: "middle"
                    },
                    {
                        field: 'LinkManName',
                        title: '客户名称',
                        align: "center", valign: "middle"
                    },
                    {
                        field: 'TotalMoney',
                        title: '销售金额',
                        align: "center", valign: "middle"
                    }
                    ,
                    {
                        field: 'OrderDate',
                        title: '单据日期',
                        align: "center", valign: "middle",
                        formatter: function (value) {
                            return moment(value).format("YYYY-MM-DD");
                        }
                    }
                ]
             });
             checkOn($orderTable, orderSelections);
        }
        //保留选中结果
        function payeeResponseHandler(res) {
            $.each(res.rows, function (i, row) {
                row.state = $.inArray(row.Id, payeeSelections.ids) !== -1;
            });
            return res;
         }
        //保留选中结果
        function orderResponseHandler(res) {
            $.each(res.rows, function (i, row) {
                row.state = $.inArray(row.Id, orderSelections.ids) !== -1;
            });
            return res;
        }

        //注册选中事件
        function checkOn($table,selections) {
            $table.on('check.bs.table check-all.bs.table ' +
                'uncheck.bs.table uncheck-all.bs.table', function (e, rows) {
                    var ids = $.map(!$.isArray(rows) ? [rows] : rows, function (row) {
                        return row.Id;
                    }),
                        rowarry = $.map(!$.isArray(rows) ? [rows] : rows, function (row) {
                            return row;
                        }),
                        func = $.inArray(e.type, ['check', 'check-all']) > -1 ? 'union' : 'difference';
                    selections.ids = _[func](selections.ids, ids);
                    selections.rows = _[func](selections.rows, rowarry);
                });
        }
    </script>
}


