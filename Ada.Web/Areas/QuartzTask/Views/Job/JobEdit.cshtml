@using QuartzTask.Models
@model Ada.Core.ViewModel.QuartzTask.JobView
@{
    IEnumerable<SelectListItem> jobTypes = JobHelper.GetJobs().Select(d => new SelectListItem() { Text = d, Value = d });
}
<div class="row">
    <div class="col-lg-12">
        <div class="ibox">
            <div class="ibox-title">
                <a class="btn btn-outline btn-default btn-sm" href="javascript:window.history.go(-1);"><i class="fa fa-reply"></i> 返回</a>
                <button class="btn btn-primary btn-sm" type="submit"><i class="fa fa-floppy-o"></i> 保存</button>
            </div>
            <div class="ibox-content">
                <div class="sk-spinner sk-spinner-wave">
                    <div class="sk-rect2"></div>
                    <div class="sk-rect3"></div>
                    <div class="sk-rect4"></div>
                    <div class="sk-rect5"></div>
                </div>
                <div class="form-horizontal">
                    <div class="form-group">
                        @Html.LabelFor(d => d.GroupName, Html.DisplayNameFor(d => d.GroupName).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            @Html.TextBoxFor(d => d.GroupName, new { @class = "form-control", required = "" })
                        </div>
                    </div>
                    <div class="hr-line-dashed"></div>
                    <div class="form-group">
                        @Html.LabelFor(d => d.JobName, Html.DisplayNameFor(d => d.JobName).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            @Html.TextBoxFor(d => d.JobName, new { @class = "form-control", required = "" })
                        </div>
                    </div>
                    <div class="hr-line-dashed"></div>
                    <div class="form-group">
                        @Html.LabelFor(d => d.JobType, Html.DisplayNameFor(d => d.JobType).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            @Html.DropDownListFor(d => d.JobType, jobTypes, new { @class = "form-control", required = "" })
                        </div>
                    </div>
                    <div class="hr-line-dashed"></div>
                    <div class="form-group">
                        @Html.LabelFor(d => d.TriggerName, Html.DisplayNameFor(d => d.TriggerName).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            @Html.TextBoxFor(d => d.TriggerName, new { @class = "form-control", required = "" })
                        </div>
                    </div>
                    <div class="hr-line-dashed"></div>
                    <div class="form-group">
                        @Html.LabelFor(d => d.Cron, Html.DisplayNameFor(d => d.Cron).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            @Html.TextBoxFor(d => d.Cron, new { @class = "form-control", required = "" })
                        </div>
                    </div>
                    <div class="hr-line-dashed"></div>
                    <div class="form-group">
                        @Html.LabelFor(d => d.StartAndEnd, Html.DisplayNameFor(d => d.StartAndEnd).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">

                            <div class="input-group date">
                                @Html.TextBoxFor(d => d.StartAndEnd, new { @class = "form-control", @readonly = "" })

                                <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                            </div>
                        </div>
                        @Html.HiddenFor(d => d.StartTime)
                        @Html.HiddenFor(d => d.EndTime)
                    </div>
                    <div class="hr-line-dashed"></div>
                    <div class="form-group">
                        @Html.LabelFor(d => d.Times, Html.DisplayNameFor(d => d.Times).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            @Html.TextBoxFor(d => d.Times, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="hr-line-dashed"></div>
                    <div class="form-group">
                        @Html.LabelFor(d => d.ApiUrl, Html.DisplayNameFor(d => d.ApiUrl).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            @Html.TextBoxFor(d => d.ApiUrl, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="hr-line-dashed"></div>
                    <div class="form-group">
                        @Html.LabelFor(d => d.AppId, Html.DisplayNameFor(d => d.AppId).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            @Html.TextBoxFor(d => d.AppId, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="hr-line-dashed"></div>
                    <div class="form-group">
                        @Html.LabelFor(d => d.Token, Html.DisplayNameFor(d => d.Token).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            @Html.TextBoxFor(d => d.Token, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="hr-line-dashed"></div>
                    <div class="form-group">
                        @Html.LabelFor(d => d.Params, Html.DisplayNameFor(d => d.Params).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            @Html.TextBoxFor(d => d.Params, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="hr-line-dashed"></div>
                    <div class="form-group">
                        @Html.LabelFor(d => d.TimeOut, Html.DisplayNameFor(d => d.TimeOut).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            @Html.TextBoxFor(d => d.TimeOut, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="hr-line-dashed"></div>
                    <div class="form-group">
                        @Html.LabelFor(d => d.Repetitions, Html.DisplayNameFor(d => d.Repetitions).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            @Html.TextBoxFor(d => d.Repetitions, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="hr-line-dashed"></div>
                    <div class="form-group">
                        @Html.LabelFor(d => d.IsLog, Html.DisplayNameFor(d => d.IsLog).ToString(), new { @class = "col-sm-2 control-label" })
                        <div class="col-sm-10">
                            <div class="checkbox checkbox-info">
                                @{
                                    var isChecked = Model.IsLog == true ? "checked=\"\"" : "";
                                }
                                <input id="@Html.IdFor(d => d.IsLog)" type="checkbox" name="@Html.IdFor(d => d.IsLog)" value="true" @isChecked>
                                <label for="@Html.IdFor(d => d.IsLog)">
                                    <strong>开启</strong>
                                </label>
                            </div>
                        </div>
                    </div>
                    @Html.HiddenFor(d => d.Id)
                </div>
            </div>
        </div>
    </div>
</div>
